// Code generated by MockGen. DO NOT EDIT.
// Source: ../../clients/k8s/k8snodepool/nodepool.go

// Package k8snodepool is a generated GoMock package.
package k8snodepool

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/ionos-cloud/crossplane-provider-ionoscloud/apis/k8s/v1alpha1"
	ionoscloud "github.com/ionos-cloud/sdk-go/v6"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CheckDuplicateK8sNodePool mocks base method.
func (m *MockClient) CheckDuplicateK8sNodePool(ctx context.Context, clusterID, nodePoolName string, cr *v1alpha1.NodePool) (*ionoscloud.KubernetesNodePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDuplicateK8sNodePool", ctx, clusterID, nodePoolName, cr)
	ret0, _ := ret[0].(*ionoscloud.KubernetesNodePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDuplicateK8sNodePool indicates an expected call of CheckDuplicateK8sNodePool.
func (mr *MockClientMockRecorder) CheckDuplicateK8sNodePool(ctx, clusterID, nodePoolName, cr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDuplicateK8sNodePool", reflect.TypeOf((*MockClient)(nil).CheckDuplicateK8sNodePool), ctx, clusterID, nodePoolName, cr)
}

// CreateK8sNodePool mocks base method.
func (m *MockClient) CreateK8sNodePool(ctx context.Context, clusterID string, nodepool ionoscloud.KubernetesNodePoolForPost) (ionoscloud.KubernetesNodePool, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateK8sNodePool", ctx, clusterID, nodepool)
	ret0, _ := ret[0].(ionoscloud.KubernetesNodePool)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateK8sNodePool indicates an expected call of CreateK8sNodePool.
func (mr *MockClientMockRecorder) CreateK8sNodePool(ctx, clusterID, nodepool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateK8sNodePool", reflect.TypeOf((*MockClient)(nil).CreateK8sNodePool), ctx, clusterID, nodepool)
}

// DeleteK8sNodePool mocks base method.
func (m *MockClient) DeleteK8sNodePool(ctx context.Context, clusterID, nodepoolID string) (*ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteK8sNodePool", ctx, clusterID, nodepoolID)
	ret0, _ := ret[0].(*ionoscloud.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteK8sNodePool indicates an expected call of DeleteK8sNodePool.
func (mr *MockClientMockRecorder) DeleteK8sNodePool(ctx, clusterID, nodepoolID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteK8sNodePool", reflect.TypeOf((*MockClient)(nil).DeleteK8sNodePool), ctx, clusterID, nodepoolID)
}

// GetAPIClient mocks base method.
func (m *MockClient) GetAPIClient() *ionoscloud.APIClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIClient")
	ret0, _ := ret[0].(*ionoscloud.APIClient)
	return ret0
}

// GetAPIClient indicates an expected call of GetAPIClient.
func (mr *MockClientMockRecorder) GetAPIClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIClient", reflect.TypeOf((*MockClient)(nil).GetAPIClient))
}

// GetK8sNodePool mocks base method.
func (m *MockClient) GetK8sNodePool(ctx context.Context, clusterID, nodepoolID string) (ionoscloud.KubernetesNodePool, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetK8sNodePool", ctx, clusterID, nodepoolID)
	ret0, _ := ret[0].(ionoscloud.KubernetesNodePool)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetK8sNodePool indicates an expected call of GetK8sNodePool.
func (mr *MockClientMockRecorder) GetK8sNodePool(ctx, clusterID, nodepoolID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetK8sNodePool", reflect.TypeOf((*MockClient)(nil).GetK8sNodePool), ctx, clusterID, nodepoolID)
}

// GetK8sNodePoolID mocks base method.
func (m *MockClient) GetK8sNodePoolID(nodepool *ionoscloud.KubernetesNodePool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetK8sNodePoolID", nodepool)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetK8sNodePoolID indicates an expected call of GetK8sNodePoolID.
func (mr *MockClientMockRecorder) GetK8sNodePoolID(nodepool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetK8sNodePoolID", reflect.TypeOf((*MockClient)(nil).GetK8sNodePoolID), nodepool)
}

// UpdateK8sNodePool mocks base method.
func (m *MockClient) UpdateK8sNodePool(ctx context.Context, clusterID, nodepoolID string, nodepool ionoscloud.KubernetesNodePoolForPut) (ionoscloud.KubernetesNodePool, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateK8sNodePool", ctx, clusterID, nodepoolID, nodepool)
	ret0, _ := ret[0].(ionoscloud.KubernetesNodePool)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateK8sNodePool indicates an expected call of UpdateK8sNodePool.
func (mr *MockClientMockRecorder) UpdateK8sNodePool(ctx, clusterID, nodepoolID, nodepool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateK8sNodePool", reflect.TypeOf((*MockClient)(nil).UpdateK8sNodePool), ctx, clusterID, nodepoolID, nodepool)
}
