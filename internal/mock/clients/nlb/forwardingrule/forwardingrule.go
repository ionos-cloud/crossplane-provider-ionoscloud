// Code generated by MockGen. DO NOT EDIT.
// Source: ../../clients/nlb/forwardingrule/forwardingrule.go
//
// Generated by this command:
//
//	mockgen -source=../../clients/nlb/forwardingrule/forwardingrule.go -destination=nlb/forwardingrule/forwardingrule.go -package forwardingrule
//

// Package forwardingrule is a generated GoMock package.
package forwardingrule

import (
	context "context"
	reflect "reflect"

	ionoscloud "github.com/ionos-cloud/sdk-go/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CheckDuplicateForwardingRule mocks base method.
func (m *MockClient) CheckDuplicateForwardingRule(ctx context.Context, datacenterID, nlbID, ruleName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDuplicateForwardingRule", ctx, datacenterID, nlbID, ruleName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDuplicateForwardingRule indicates an expected call of CheckDuplicateForwardingRule.
func (mr *MockClientMockRecorder) CheckDuplicateForwardingRule(ctx, datacenterID, nlbID, ruleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDuplicateForwardingRule", reflect.TypeOf((*MockClient)(nil).CheckDuplicateForwardingRule), ctx, datacenterID, nlbID, ruleName)
}

// CreateForwardingRule mocks base method.
func (m *MockClient) CreateForwardingRule(ctx context.Context, datacenterID, nlbID string, rule ionoscloud.NetworkLoadBalancerForwardingRule) (ionoscloud.NetworkLoadBalancerForwardingRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForwardingRule", ctx, datacenterID, nlbID, rule)
	ret0, _ := ret[0].(ionoscloud.NetworkLoadBalancerForwardingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateForwardingRule indicates an expected call of CreateForwardingRule.
func (mr *MockClientMockRecorder) CreateForwardingRule(ctx, datacenterID, nlbID, rule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForwardingRule", reflect.TypeOf((*MockClient)(nil).CreateForwardingRule), ctx, datacenterID, nlbID, rule)
}

// DeleteForwardingRule mocks base method.
func (m *MockClient) DeleteForwardingRule(ctx context.Context, datacenterID, nlbID, ruleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForwardingRule", ctx, datacenterID, nlbID, ruleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForwardingRule indicates an expected call of DeleteForwardingRule.
func (mr *MockClientMockRecorder) DeleteForwardingRule(ctx, datacenterID, nlbID, ruleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForwardingRule", reflect.TypeOf((*MockClient)(nil).DeleteForwardingRule), ctx, datacenterID, nlbID, ruleID)
}

// GetForwardingRuleByID mocks base method.
func (m *MockClient) GetForwardingRuleByID(ctx context.Context, datacenterID, nlbID, ruleID string) (ionoscloud.NetworkLoadBalancerForwardingRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForwardingRuleByID", ctx, datacenterID, nlbID, ruleID)
	ret0, _ := ret[0].(ionoscloud.NetworkLoadBalancerForwardingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForwardingRuleByID indicates an expected call of GetForwardingRuleByID.
func (mr *MockClientMockRecorder) GetForwardingRuleByID(ctx, datacenterID, nlbID, ruleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForwardingRuleByID", reflect.TypeOf((*MockClient)(nil).GetForwardingRuleByID), ctx, datacenterID, nlbID, ruleID)
}

// UpdateForwardingRule mocks base method.
func (m *MockClient) UpdateForwardingRule(ctx context.Context, datacenterID, nlbID, ruleID string, ruleProperties ionoscloud.NetworkLoadBalancerForwardingRuleProperties) (ionoscloud.NetworkLoadBalancerForwardingRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateForwardingRule", ctx, datacenterID, nlbID, ruleID, ruleProperties)
	ret0, _ := ret[0].(ionoscloud.NetworkLoadBalancerForwardingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateForwardingRule indicates an expected call of UpdateForwardingRule.
func (mr *MockClientMockRecorder) UpdateForwardingRule(ctx, datacenterID, nlbID, ruleID, ruleProperties any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateForwardingRule", reflect.TypeOf((*MockClient)(nil).UpdateForwardingRule), ctx, datacenterID, nlbID, ruleID, ruleProperties)
}
