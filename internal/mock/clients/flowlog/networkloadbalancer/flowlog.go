// Code generated by MockGen. DO NOT EDIT.
// Source: ../../clients/flowlog/networkloadbalancer.go

// Package networkloadbalancer is a generated GoMock package.
package networkloadbalancer

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	ionoscloud "github.com/ionos-cloud/sdk-go/v6"
)

// MockNLBFlowLog is a mock of NLBFlowLog interface.
type MockNLBFlowLog struct {
	ctrl     *gomock.Controller
	recorder *MockNLBFlowLogMockRecorder
}

// MockNLBFlowLogMockRecorder is the mock recorder for MockNLBFlowLog.
type MockNLBFlowLogMockRecorder struct {
	mock *MockNLBFlowLog
}

// NewMockNLBFlowLog creates a new mock instance.
func NewMockNLBFlowLog(ctrl *gomock.Controller) *MockNLBFlowLog {
	mock := &MockNLBFlowLog{ctrl: ctrl}
	mock.recorder = &MockNLBFlowLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNLBFlowLog) EXPECT() *MockNLBFlowLogMockRecorder {
	return m.recorder
}

// CheckDuplicateFlowLog mocks base method.
func (m *MockNLBFlowLog) CheckDuplicateFlowLog(ctx context.Context, datacenterID, nlbID, flowLogName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDuplicateFlowLog", ctx, datacenterID, nlbID, flowLogName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDuplicateFlowLog indicates an expected call of CheckDuplicateFlowLog.
func (mr *MockNLBFlowLogMockRecorder) CheckDuplicateFlowLog(ctx, datacenterID, nlbID, flowLogName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDuplicateFlowLog", reflect.TypeOf((*MockNLBFlowLog)(nil).CheckDuplicateFlowLog), ctx, datacenterID, nlbID, flowLogName)
}

// CreateFlowLog mocks base method.
func (m *MockNLBFlowLog) CreateFlowLog(ctx context.Context, datacenterID, nlbID string, flowLog ionoscloud.FlowLog) (ionoscloud.FlowLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlowLog", ctx, datacenterID, nlbID, flowLog)
	ret0, _ := ret[0].(ionoscloud.FlowLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlowLog indicates an expected call of CreateFlowLog.
func (mr *MockNLBFlowLogMockRecorder) CreateFlowLog(ctx, datacenterID, nlbID, flowLog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlowLog", reflect.TypeOf((*MockNLBFlowLog)(nil).CreateFlowLog), ctx, datacenterID, nlbID, flowLog)
}

// DeleteFlowLog mocks base method.
func (m *MockNLBFlowLog) DeleteFlowLog(ctx context.Context, datacenterID, nlbID, flowLogID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlowLog", ctx, datacenterID, nlbID, flowLogID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFlowLog indicates an expected call of DeleteFlowLog.
func (mr *MockNLBFlowLogMockRecorder) DeleteFlowLog(ctx, datacenterID, nlbID, flowLogID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlowLog", reflect.TypeOf((*MockNLBFlowLog)(nil).DeleteFlowLog), ctx, datacenterID, nlbID, flowLogID)
}

// GetFlowLogByID mocks base method.
func (m *MockNLBFlowLog) GetFlowLogByID(ctx context.Context, datacenterID, nlbID, flowLogID string) (ionoscloud.FlowLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlowLogByID", ctx, datacenterID, nlbID, flowLogID)
	ret0, _ := ret[0].(ionoscloud.FlowLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlowLogByID indicates an expected call of GetFlowLogByID.
func (mr *MockNLBFlowLogMockRecorder) GetFlowLogByID(ctx, datacenterID, nlbID, flowLogID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowLogByID", reflect.TypeOf((*MockNLBFlowLog)(nil).GetFlowLogByID), ctx, datacenterID, nlbID, flowLogID)
}

// UpdateFlowLog mocks base method.
func (m *MockNLBFlowLog) UpdateFlowLog(ctx context.Context, datacenterID, nlbID, flowLogID string, flowLog ionoscloud.FlowLogProperties) (ionoscloud.FlowLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlowLog", ctx, datacenterID, nlbID, flowLogID, flowLog)
	ret0, _ := ret[0].(ionoscloud.FlowLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlowLog indicates an expected call of UpdateFlowLog.
func (mr *MockNLBFlowLogMockRecorder) UpdateFlowLog(ctx, datacenterID, nlbID, flowLogID, flowLog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlowLog", reflect.TypeOf((*MockNLBFlowLog)(nil).UpdateFlowLog), ctx, datacenterID, nlbID, flowLogID, flowLog)
}
