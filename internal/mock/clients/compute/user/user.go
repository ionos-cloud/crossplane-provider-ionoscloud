// Code generated by MockGen. DO NOT EDIT.
// Source: ../../clients/compute/user/user.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/ionos-cloud/crossplane-provider-ionoscloud/apis/compute/v1alpha1"
	ionoscloud "github.com/ionos-cloud/sdk-go/v6"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockClient) CreateUser(ctx context.Context, p v1alpha1.UserParameters) (ionoscloud.User, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, p)
	ret0, _ := ret[0].(ionoscloud.User)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockClientMockRecorder) CreateUser(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockClient)(nil).CreateUser), ctx, p)
}

// DeleteUser mocks base method.
func (m *MockClient) DeleteUser(ctx context.Context, id string) (*ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(*ionoscloud.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockClientMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockClient)(nil).DeleteUser), ctx, id)
}

// GetAPIClient mocks base method.
func (m *MockClient) GetAPIClient() *ionoscloud.APIClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIClient")
	ret0, _ := ret[0].(*ionoscloud.APIClient)
	return ret0
}

// GetAPIClient indicates an expected call of GetAPIClient.
func (mr *MockClientMockRecorder) GetAPIClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIClient", reflect.TypeOf((*MockClient)(nil).GetAPIClient))
}

// GetUser mocks base method.
func (m *MockClient) GetUser(ctx context.Context, id string) (ionoscloud.User, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(ionoscloud.User)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUser indicates an expected call of GetUser.
func (mr *MockClientMockRecorder) GetUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockClient)(nil).GetUser), ctx, id)
}

// UpdateUser mocks base method.
func (m *MockClient) UpdateUser(ctx context.Context, id string, p v1alpha1.UserParameters) (ionoscloud.User, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, id, p)
	ret0, _ := ret[0].(ionoscloud.User)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockClientMockRecorder) UpdateUser(ctx, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockClient)(nil).UpdateUser), ctx, id, p)
}

// MockuserPropsSetter is a mock of userPropsSetter interface.
type MockuserPropsSetter struct {
	ctrl     *gomock.Controller
	recorder *MockuserPropsSetterMockRecorder
}

// MockuserPropsSetterMockRecorder is the mock recorder for MockuserPropsSetter.
type MockuserPropsSetterMockRecorder struct {
	mock *MockuserPropsSetter
}

// NewMockuserPropsSetter creates a new mock instance.
func NewMockuserPropsSetter(ctrl *gomock.Controller) *MockuserPropsSetter {
	mock := &MockuserPropsSetter{ctrl: ctrl}
	mock.recorder = &MockuserPropsSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserPropsSetter) EXPECT() *MockuserPropsSetterMockRecorder {
	return m.recorder
}

// SetActive mocks base method.
func (m *MockuserPropsSetter) SetActive(v bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActive", v)
}

// SetActive indicates an expected call of SetActive.
func (mr *MockuserPropsSetterMockRecorder) SetActive(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActive", reflect.TypeOf((*MockuserPropsSetter)(nil).SetActive), v)
}

// SetAdministrator mocks base method.
func (m *MockuserPropsSetter) SetAdministrator(v bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAdministrator", v)
}

// SetAdministrator indicates an expected call of SetAdministrator.
func (mr *MockuserPropsSetterMockRecorder) SetAdministrator(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAdministrator", reflect.TypeOf((*MockuserPropsSetter)(nil).SetAdministrator), v)
}

// SetEmail mocks base method.
func (m *MockuserPropsSetter) SetEmail(v string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEmail", v)
}

// SetEmail indicates an expected call of SetEmail.
func (mr *MockuserPropsSetterMockRecorder) SetEmail(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEmail", reflect.TypeOf((*MockuserPropsSetter)(nil).SetEmail), v)
}

// SetFirstname mocks base method.
func (m *MockuserPropsSetter) SetFirstname(v string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFirstname", v)
}

// SetFirstname indicates an expected call of SetFirstname.
func (mr *MockuserPropsSetterMockRecorder) SetFirstname(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFirstname", reflect.TypeOf((*MockuserPropsSetter)(nil).SetFirstname), v)
}

// SetForceSecAuth mocks base method.
func (m *MockuserPropsSetter) SetForceSecAuth(v bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetForceSecAuth", v)
}

// SetForceSecAuth indicates an expected call of SetForceSecAuth.
func (mr *MockuserPropsSetterMockRecorder) SetForceSecAuth(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetForceSecAuth", reflect.TypeOf((*MockuserPropsSetter)(nil).SetForceSecAuth), v)
}

// SetLastname mocks base method.
func (m *MockuserPropsSetter) SetLastname(v string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastname", v)
}

// SetLastname indicates an expected call of SetLastname.
func (mr *MockuserPropsSetterMockRecorder) SetLastname(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastname", reflect.TypeOf((*MockuserPropsSetter)(nil).SetLastname), v)
}

// SetPassword mocks base method.
func (m *MockuserPropsSetter) SetPassword(v string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPassword", v)
}

// SetPassword indicates an expected call of SetPassword.
func (mr *MockuserPropsSetterMockRecorder) SetPassword(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockuserPropsSetter)(nil).SetPassword), v)
}

// SetSecAuthActive mocks base method.
func (m *MockuserPropsSetter) SetSecAuthActive(v bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSecAuthActive", v)
}

// SetSecAuthActive indicates an expected call of SetSecAuthActive.
func (mr *MockuserPropsSetterMockRecorder) SetSecAuthActive(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecAuthActive", reflect.TypeOf((*MockuserPropsSetter)(nil).SetSecAuthActive), v)
}
