// Code generated by MockGen. DO NOT EDIT.
// Source: ../../clients/compute/ipblock/ipblock.go

// Package ipblock is a generated GoMock package.
package ipblock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ionoscloud "github.com/ionos-cloud/sdk-go/v6"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CheckDuplicateIPBlock mocks base method.
func (m *MockClient) CheckDuplicateIPBlock(ctx context.Context, ipBlockName, location string) (*ionoscloud.IpBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDuplicateIPBlock", ctx, ipBlockName, location)
	ret0, _ := ret[0].(*ionoscloud.IpBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDuplicateIPBlock indicates an expected call of CheckDuplicateIPBlock.
func (mr *MockClientMockRecorder) CheckDuplicateIPBlock(ctx, ipBlockName, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDuplicateIPBlock", reflect.TypeOf((*MockClient)(nil).CheckDuplicateIPBlock), ctx, ipBlockName, location)
}

// CreateIPBlock mocks base method.
func (m *MockClient) CreateIPBlock(ctx context.Context, ipBlock ionoscloud.IpBlock) (ionoscloud.IpBlock, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIPBlock", ctx, ipBlock)
	ret0, _ := ret[0].(ionoscloud.IpBlock)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateIPBlock indicates an expected call of CreateIPBlock.
func (mr *MockClientMockRecorder) CreateIPBlock(ctx, ipBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIPBlock", reflect.TypeOf((*MockClient)(nil).CreateIPBlock), ctx, ipBlock)
}

// DeleteIPBlock mocks base method.
func (m *MockClient) DeleteIPBlock(ctx context.Context, ipBlockID string) (*ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIPBlock", ctx, ipBlockID)
	ret0, _ := ret[0].(*ionoscloud.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIPBlock indicates an expected call of DeleteIPBlock.
func (mr *MockClientMockRecorder) DeleteIPBlock(ctx, ipBlockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPBlock", reflect.TypeOf((*MockClient)(nil).DeleteIPBlock), ctx, ipBlockID)
}

// GetAPIClient mocks base method.
func (m *MockClient) GetAPIClient() *ionoscloud.APIClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIClient")
	ret0, _ := ret[0].(*ionoscloud.APIClient)
	return ret0
}

// GetAPIClient indicates an expected call of GetAPIClient.
func (mr *MockClientMockRecorder) GetAPIClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIClient", reflect.TypeOf((*MockClient)(nil).GetAPIClient))
}

// GetIPBlock mocks base method.
func (m *MockClient) GetIPBlock(ctx context.Context, ipBlockID string) (ionoscloud.IpBlock, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPBlock", ctx, ipBlockID)
	ret0, _ := ret[0].(ionoscloud.IpBlock)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIPBlock indicates an expected call of GetIPBlock.
func (mr *MockClientMockRecorder) GetIPBlock(ctx, ipBlockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPBlock", reflect.TypeOf((*MockClient)(nil).GetIPBlock), ctx, ipBlockID)
}

// GetIPBlockID mocks base method.
func (m *MockClient) GetIPBlockID(ipBlock *ionoscloud.IpBlock) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPBlockID", ipBlock)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPBlockID indicates an expected call of GetIPBlockID.
func (mr *MockClientMockRecorder) GetIPBlockID(ipBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPBlockID", reflect.TypeOf((*MockClient)(nil).GetIPBlockID), ipBlock)
}

// GetIPs mocks base method.
func (m *MockClient) GetIPs(ctx context.Context, ipBlockID string, indexes ...int) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, ipBlockID}
	for _, a := range indexes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIPs", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPs indicates an expected call of GetIPs.
func (mr *MockClientMockRecorder) GetIPs(ctx, ipBlockID interface{}, indexes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, ipBlockID}, indexes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPs", reflect.TypeOf((*MockClient)(nil).GetIPs), varargs...)
}

// UpdateIPBlock mocks base method.
func (m *MockClient) UpdateIPBlock(ctx context.Context, ipBlockID string, ipBlock ionoscloud.IpBlockProperties) (ionoscloud.IpBlock, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIPBlock", ctx, ipBlockID, ipBlock)
	ret0, _ := ret[0].(ionoscloud.IpBlock)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateIPBlock indicates an expected call of UpdateIPBlock.
func (mr *MockClientMockRecorder) UpdateIPBlock(ctx, ipBlockID, ipBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIPBlock", reflect.TypeOf((*MockClient)(nil).UpdateIPBlock), ctx, ipBlockID, ipBlock)
}
