// Code generated by MockGen. DO NOT EDIT.
// Source: ../../clients/compute/datacenter/datacenter.go

// Package datacenter is a generated GoMock package.
package datacenter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ionoscloud "github.com/ionos-cloud/sdk-go/v6"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CheckDuplicateDatacenter mocks base method.
func (m *MockClient) CheckDuplicateDatacenter(ctx context.Context, datacenterName, location string) (*ionoscloud.Datacenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDuplicateDatacenter", ctx, datacenterName, location)
	ret0, _ := ret[0].(*ionoscloud.Datacenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDuplicateDatacenter indicates an expected call of CheckDuplicateDatacenter.
func (mr *MockClientMockRecorder) CheckDuplicateDatacenter(ctx, datacenterName, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDuplicateDatacenter", reflect.TypeOf((*MockClient)(nil).CheckDuplicateDatacenter), ctx, datacenterName, location)
}

// CreateDatacenter mocks base method.
func (m *MockClient) CreateDatacenter(ctx context.Context, datacenter ionoscloud.Datacenter) (ionoscloud.Datacenter, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatacenter", ctx, datacenter)
	ret0, _ := ret[0].(ionoscloud.Datacenter)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDatacenter indicates an expected call of CreateDatacenter.
func (mr *MockClientMockRecorder) CreateDatacenter(ctx, datacenter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatacenter", reflect.TypeOf((*MockClient)(nil).CreateDatacenter), ctx, datacenter)
}

// DeleteDatacenter mocks base method.
func (m *MockClient) DeleteDatacenter(ctx context.Context, datacenterID string) (*ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatacenter", ctx, datacenterID)
	ret0, _ := ret[0].(*ionoscloud.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatacenter indicates an expected call of DeleteDatacenter.
func (mr *MockClientMockRecorder) DeleteDatacenter(ctx, datacenterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatacenter", reflect.TypeOf((*MockClient)(nil).DeleteDatacenter), ctx, datacenterID)
}

// GetAPIClient mocks base method.
func (m *MockClient) GetAPIClient() *ionoscloud.APIClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIClient")
	ret0, _ := ret[0].(*ionoscloud.APIClient)
	return ret0
}

// GetAPIClient indicates an expected call of GetAPIClient.
func (mr *MockClientMockRecorder) GetAPIClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIClient", reflect.TypeOf((*MockClient)(nil).GetAPIClient))
}

// GetCPUFamiliesForDatacenter mocks base method.
func (m *MockClient) GetCPUFamiliesForDatacenter(ctx context.Context, datacenterID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPUFamiliesForDatacenter", ctx, datacenterID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCPUFamiliesForDatacenter indicates an expected call of GetCPUFamiliesForDatacenter.
func (mr *MockClientMockRecorder) GetCPUFamiliesForDatacenter(ctx, datacenterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPUFamiliesForDatacenter", reflect.TypeOf((*MockClient)(nil).GetCPUFamiliesForDatacenter), ctx, datacenterID)
}

// GetDatacenter mocks base method.
func (m *MockClient) GetDatacenter(ctx context.Context, datacenterID string) (ionoscloud.Datacenter, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatacenter", ctx, datacenterID)
	ret0, _ := ret[0].(ionoscloud.Datacenter)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDatacenter indicates an expected call of GetDatacenter.
func (mr *MockClientMockRecorder) GetDatacenter(ctx, datacenterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatacenter", reflect.TypeOf((*MockClient)(nil).GetDatacenter), ctx, datacenterID)
}

// GetDatacenterID mocks base method.
func (m *MockClient) GetDatacenterID(datacenter *ionoscloud.Datacenter) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatacenterID", datacenter)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatacenterID indicates an expected call of GetDatacenterID.
func (mr *MockClientMockRecorder) GetDatacenterID(datacenter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatacenterID", reflect.TypeOf((*MockClient)(nil).GetDatacenterID), datacenter)
}

// UpdateDatacenter mocks base method.
func (m *MockClient) UpdateDatacenter(ctx context.Context, datacenterID string, datacenter ionoscloud.DatacenterProperties) (ionoscloud.Datacenter, *ionoscloud.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatacenter", ctx, datacenterID, datacenter)
	ret0, _ := ret[0].(ionoscloud.Datacenter)
	ret1, _ := ret[1].(*ionoscloud.APIResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateDatacenter indicates an expected call of UpdateDatacenter.
func (mr *MockClientMockRecorder) UpdateDatacenter(ctx, datacenterID, datacenter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatacenter", reflect.TypeOf((*MockClient)(nil).UpdateDatacenter), ctx, datacenterID, datacenter)
}
