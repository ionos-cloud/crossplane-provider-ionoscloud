name: CI

on:
  pull_request: { }
  workflow_dispatch: { }

env:
  GOLANGCI_VERSION: 'v2.6'
  DOCKER_BUILDX_VERSION: 'v0.11.2'

jobs:
  detect-noop:
    runs-on: ubuntu-latest
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: Detect No-op Changes
        id: noop
        uses: fkirc/skip-duplicate-actions@v2.1.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg","docs/**.md", "examples/**.yaml"]'
          do_not_skip: '["workflow_dispatch", "schedule", "push"]'
          concurrent_skipping: false

  lint:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(make go.cachedir)"
      - name: Cache the Go Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-lint-
      - name: Cache Go Dependencies
        uses: actions/cache@v4
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-
      - name: Vendor Dependencies
        run: make vendor vendor.check
      - name: Lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: ${{ env.GOLANGCI_VERSION }}
          skip-cache: true
          only-new-issues: true
          args: --timeout 10m0s --verbose
  unit-tests:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Vendor Dependencies
        run: make vendor vendor.check
      - name: Run Unit Tests
        run: make test

  e2e-tests:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Fetch History
        run: git fetch --prune --unshallow
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(make go.cachedir)"
      - name: Cache the Go Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-e2e-tests-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-e2e-tests-
      - name: Cache Go Dependencies
        uses: actions/cache@v4
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-pkg-
      - name: Vendor Dependencies
        run: make vendor vendor.check
      - name: Build Helm Chart
        run: make -j2 build VERSION=latest --debug
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"
      #          Use only if the VERSION is not latest
      #      - name: Docker Images Tag
      #        run: make docker.tag VERSION=latest
      - name: Docker Images List
        run: make docker.list | grep "crossplane-provider-ionoscloud"
      - name: Run E2E Tests
        run: make e2e VERSION=latest USE_HELM3=true
        env:
          IONOS_TOKEN: ${{ secrets.IONOS_TOKEN }}
          TEST_IMAGE_PASSWORD: ${{ secrets.TEST_IMAGE_PASSWORD }}
  publish-artifacts:
    runs-on: ubuntu-latest
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Fetch History
        run: git fetch --prune --unshallow
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(make go.cachedir)"
      - name: Cache the Go Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-publish-artifacts-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-publish-artifacts-
      - name: Cache Go Dependencies
        uses: actions/cache@v4
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-
      - name: Vendor Dependencies
        run: make vendor vendor.check
      - name: Build Artifacts
        run: make -j2 build.all VERSION=latest
        env:
          BUILD_ARGS: "--load"
      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: 'ghcr.io/ionos-cloud/crossplane-provider-ionoscloud-controller:latest'
          format: 'sarif'
          exit-code: 0
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Publish Artifacts to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: output
          path: _output/**
