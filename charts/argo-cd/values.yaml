argo-cd:
  dex:
    enabled: false
  notifications:
    enabled: false
  applicationSet:
    enabled: false
  server:
    extraArgs:
      - --insecure
  configs:
    cm:
      application.resourceTrackingMethod: annotation
      resource.customizations: |
          "*.upbound.io/*":
            health.lua: |
              health_status = {
                status = "Progressing",
                message = "Provisioning ..."
              }
          
              local function contains (table, val)
                for i, v in ipairs(table) do
                  if v == val then
                    return true
                  end
                end
                return false
              end
          
              local has_no_status = {
                "ProviderConfig",
                "ProviderConfigUsage"
              }
          
              if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
          
              if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
                if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
                  health_status.status = "Healthy"
                  health_status.message = "Resource is in use."
                  return health_status
                end
                return health_status
              end
          
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "LastAsyncOperation" then
                  if condition.status == "False" then
                    health_status.status = "Degraded"
                    health_status.message = condition.message
                    return health_status
                  end
                end
          
                if condition.type == "Synced" then
                  if condition.status == "False" then
                    health_status.status = "Degraded"
                    health_status.message = condition.message
                    return health_status
                  end
                end
          
                if condition.type == "Ready" then
                  if condition.status == "True" then
                    health_status.status = "Healthy"
                    health_status.message = "Resource is up-to-date."
                    return health_status
                  end
                end
              end
          
              return health_status
          
          "*.crossplane.io/*":
            health.lua: |
              health_status = {
                status = "Progressing",
                message = "Provisioning ..."
              }
          
              local function contains (table, val)
                for i, v in ipairs(table) do
                  if v == val then
                    return true
                  end
                end
                return false
              end
          
              local has_no_status = {
                "Composition",
                "CompositionRevision",
                "DeploymentRuntimeConfig",
                "ControllerConfig",
                "ProviderConfig",
                "ProviderConfigUsage"
              }
              if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
                  health_status.status = "Healthy"
                  health_status.message = "Resource is up-to-date."
                return health_status
              end
          
              if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
                if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
                  health_status.status = "Healthy"
                  health_status.message = "Resource is in use."
                  return health_status
                end
                return health_status
              end
          
              for i, condition in ipairs(obj.status.conditions) do
                if condition.type == "LastAsyncOperation" then
                  if condition.status == "False" then
                    health_status.status = "Degraded"
                    health_status.message = condition.message
                    return health_status
                  end
                end
          
                if condition.type == "Synced" then
                  if condition.status == "False" then
                    health_status.status = "Degraded"
                    health_status.message = condition.message
                    return health_status
                  end
                end
          
                if contains({"Ready", "Healthy", "Offered", "Established"}, condition.type) then
                  if condition.status == "True" then
                    health_status.status = "Healthy"
                    health_status.message = "Resource is up-to-date."
                    return health_status
                  end
                end
              end
          
              return health_status

# -- Repositories list to be used by applications
## Creates a secret for each key/value specified below to create repositories
## Note: the last example in the list would use a repository credential template, configured under "configs.credentialTemplates".
#repositories: {}
  # istio-helm-repo:
  #   url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts
  #   name: istio.io
  #   type: helm
  # private-helm-repo:
  #   url: https://my-private-chart-repo.internal
  #   name: private-repo
  #   type: helm
  #   password: my-password
  #   username: my-username
  # private-repo:
#   url: https://github.com/argoproj/private-repo
